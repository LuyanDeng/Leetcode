# sliding window, 
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if prices == None or len(prices) <2 :
            return 0
        min_p = prices[0]
        profit = 0
        for i in range(len(prices)):

            if(prices[i]<min_p):
                min_p = prices[i]
            profit = max(prices[i]-min_p, profit)
        return profit
# two pointers
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        left = 0
        right =1
        
        while right < len(prices):
            if prices[right] > prices[left]:
                profit = max(profit, prices[right] - prices[left])
            else:
                left = right
            right += 1
        return profit
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # profit = 0
        # buy = 0. # prices[buy] min{prices[k],k <=i}
        # sell = 1. # prices[sell] max(prices[k]), k >=j
        # # L[i] lowest price up to ith day
        # # p[i] max profit up to i th day
        # # p[i]= max(price[i]-L[i],p[i-1])
        # min_prices= [0]*len(prices)
        # max_profit = [0]*len(prices)
        # min_prices[0] = prices[0]
        # max_profit[0] = 0
        # for i in range(1,len(prices)):
        #     min_prices[i] =min(min_prices[i-1],prices[i])
        #     max_profit[i] = max(max_profit[i-1], prices[i]-min_prices[i-1])
        # return max_profit[len(prices)-1]

 
        # use lc# 53 subarray sum
        # prices = [7,1,5,3,6,4]
        # gain =[-6,4,-2,3,-2]
        # the problem turns to the max sum of the subarray
        if len(prices)<2:
            return 0
        gain = [0]*(len(prices)-1)
        for i in range(1,len(prices)):
            gain[i-1]=prices[i]-prices[i-1]

        max_gain = curr_gain =gain[0]
        for i in range(len(prices)-1):
            
            curr_gain = max(gain[i],curr_gain+gain[i])
            if curr_gain > max_gain:
                max_gain =curr_gain
        if max_gain < 0:
            return 0
        return max_gain
                
